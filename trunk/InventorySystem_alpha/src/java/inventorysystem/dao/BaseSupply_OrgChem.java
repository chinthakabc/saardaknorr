package inventorysystem.dao;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Sun Mar 21 15:11:40 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Supply_OrgChem
 */
public abstract class BaseSupply_OrgChem extends BaseObject
{
    /** The Peer class */
    private static final Supply_OrgChemPeer peer =
        new Supply_OrgChemPeer();

        
    /** The value for the supply_ID field */
    private int supply_ID;
      
    /** The value for the type field */
    private String type;
      
    /** The value for the name field */
    private String name;
      
    /** The value for the quantity field */
    private int quantity;
      
    /** The value for the amount field */
    private String amount;
      
    /** The value for the unit field */
    private String unit;
  
    
    /**
     * Get the Supply_ID
     *
     * @return int
     */
    public int getSupply_ID()
    {
        return supply_ID;
    }

                        
    /**
     * Set the value of Supply_ID
     *
     * @param v new value
     */
    public void setSupply_ID(int v) 
    {
    
                  if (this.supply_ID != v)
              {
            this.supply_ID = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Type
     *
     * @return String
     */
    public String getType()
    {
        return type;
    }

                        
    /**
     * Set the value of Type
     *
     * @param v new value
     */
    public void setType(String v) 
    {
    
                  if (!ObjectUtils.equals(this.type, v))
              {
            this.type = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Name
     *
     * @return String
     */
    public String getName()
    {
        return name;
    }

                        
    /**
     * Set the value of Name
     *
     * @param v new value
     */
    public void setName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.name, v))
              {
            this.name = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Quantity
     *
     * @return int
     */
    public int getQuantity()
    {
        return quantity;
    }

                        
    /**
     * Set the value of Quantity
     *
     * @param v new value
     */
    public void setQuantity(int v) 
    {
    
                  if (this.quantity != v)
              {
            this.quantity = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Amount
     *
     * @return String
     */
    public String getAmount()
    {
        return amount;
    }

                        
    /**
     * Set the value of Amount
     *
     * @param v new value
     */
    public void setAmount(String v) 
    {
    
                  if (!ObjectUtils.equals(this.amount, v))
              {
            this.amount = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Unit
     *
     * @return String
     */
    public String getUnit()
    {
        return unit;
    }

                        
    /**
     * Set the value of Unit
     *
     * @param v new value
     */
    public void setUnit(String v) 
    {
    
                  if (!ObjectUtils.equals(this.unit, v))
              {
            this.unit = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("Supply_ID");
              fieldNames.add("Type");
              fieldNames.add("Name");
              fieldNames.add("Quantity");
              fieldNames.add("Amount");
              fieldNames.add("Unit");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("Supply_ID"))
        {
                return new Integer(getSupply_ID());
            }
          if (name.equals("Type"))
        {
                return getType();
            }
          if (name.equals("Name"))
        {
                return getName();
            }
          if (name.equals("Quantity"))
        {
                return new Integer(getQuantity());
            }
          if (name.equals("Amount"))
        {
                return getAmount();
            }
          if (name.equals("Unit"))
        {
                return getUnit();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(Supply_OrgChemPeer.SUPPLY_ID))
        {
                return new Integer(getSupply_ID());
            }
          if (name.equals(Supply_OrgChemPeer.TYPE))
        {
                return getType();
            }
          if (name.equals(Supply_OrgChemPeer.NAME))
        {
                return getName();
            }
          if (name.equals(Supply_OrgChemPeer.QUANTITY))
        {
                return new Integer(getQuantity());
            }
          if (name.equals(Supply_OrgChemPeer.AMOUNT))
        {
                return getAmount();
            }
          if (name.equals(Supply_OrgChemPeer.UNIT))
        {
                return getUnit();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getSupply_ID());
            }
              if (pos == 1)
        {
                return getType();
            }
              if (pos == 2)
        {
                return getName();
            }
              if (pos == 3)
        {
                return new Integer(getQuantity());
            }
              if (pos == 4)
        {
                return getAmount();
            }
              if (pos == 5)
        {
                return getUnit();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(Supply_OrgChemPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    Supply_OrgChemPeer.doInsert((Supply_OrgChem) this, con);
                    setNew(false);
                }
                else
                {
                    Supply_OrgChemPeer.doUpdate((Supply_OrgChem) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


                    
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  supply_ID ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setSupply_ID(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setSupply_ID(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getSupply_ID());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Supply_OrgChem copy() throws TorqueException
    {
        return copyInto(new Supply_OrgChem());
    }
  
    protected Supply_OrgChem copyInto(Supply_OrgChem copyObj) throws TorqueException
    {
          copyObj.setSupply_ID(supply_ID);
          copyObj.setType(type);
          copyObj.setName(name);
          copyObj.setQuantity(quantity);
          copyObj.setAmount(amount);
          copyObj.setUnit(unit);
  
                    copyObj.setSupply_ID(0);
                                          
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public Supply_OrgChemPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Supply_OrgChem:\n");
        str.append("Supply_ID = ")
           .append(getSupply_ID())
           .append("\n");
        str.append("Type = ")
           .append(getType())
           .append("\n");
        str.append("Name = ")
           .append(getName())
           .append("\n");
        str.append("Quantity = ")
           .append(getQuantity())
           .append("\n");
        str.append("Amount = ")
           .append(getAmount())
           .append("\n");
        str.append("Unit = ")
           .append(getUnit())
           .append("\n");
        return(str.toString());
    }
}
