package inventorysystem.dao;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Feb 24 17:48:40 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ORF
 */
public abstract class BaseORF extends BaseObject
{
    /** The Peer class */
    private static final ORFPeer peer =
        new ORFPeer();

        
    /** The value for the oRF_ID field */
    private int oRF_ID;
      
    /** The value for the status field */
    private boolean status;
      
    /** The value for the user_ID field */
    private int user_ID;
      
    /** The value for the issue_Date field */
    private String issue_Date;
  
    
    /**
     * Get the ORF_ID
     *
     * @return int
     */
    public int getORF_ID()
    {
        return oRF_ID;
    }

                                              
    /**
     * Set the value of ORF_ID
     *
     * @param v new value
     */
    public void setORF_ID(int v) throws TorqueException
    {
    
                  if (this.oRF_ID != v)
              {
            this.oRF_ID = v;
            setModified(true);
        }
    
          
                                  
        // update associated ORF_Supply
        if (collORF_Supplys != null)
        {
            for (int i = 0; i < collORF_Supplys.size(); i++)
            {
                ((ORF_Supply) collORF_Supplys.get(i))
                    .setORF_ID(v);
            }
        }
                      }
  
    /**
     * Get the Status
     *
     * @return boolean
     */
    public boolean getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(boolean v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the User_ID
     *
     * @return int
     */
    public int getUser_ID()
    {
        return user_ID;
    }

                              
    /**
     * Set the value of User_ID
     *
     * @param v new value
     */
    public void setUser_ID(int v) throws TorqueException
    {
    
                  if (this.user_ID != v)
              {
            this.user_ID = v;
            setModified(true);
        }
    
                          
                if (aUser != null && !(aUser.getUser_ID() == v))
                {
            aUser = null;
        }
      
              }
  
    /**
     * Get the Issue_Date
     *
     * @return String
     */
    public String getIssue_Date()
    {
        return issue_Date;
    }

                        
    /**
     * Set the value of Issue_Date
     *
     * @param v new value
     */
    public void setIssue_Date(String v) 
    {
    
                  if (!ObjectUtils.equals(this.issue_Date, v))
              {
            this.issue_Date = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private User aUser;

    /**
     * Declares an association between this object and a User object
     *
     * @param v User
     * @throws TorqueException
     */
    public void setUser(User v) throws TorqueException
    {
            if (v == null)
        {
                    setUser_ID(0);
                  }
        else
        {
            setUser_ID(v.getUser_ID());
        }
                aUser = v;
    }

                                            
    /**
     * Get the associated User object
     *
     * @return the associated User object
     * @throws TorqueException
     */
    public User getUser() throws TorqueException
    {
        if (aUser == null && (this.user_ID > 0))
        {
                          aUser = UserPeer.retrieveByPK(SimpleKey.keyFor(this.user_ID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               User obj = UserPeer.retrieveByPK(this.user_ID);
               obj.addORFs(this);
            */
        }
        return aUser;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setUserKey(ObjectKey key) throws TorqueException
    {
      
                        setUser_ID(((NumberKey) key).intValue());
                  }
       
                                
            
    /**
     * Collection to store aggregation of collORF_Supplys
     */
    protected List collORF_Supplys;

    /**
     * Temporary storage of collORF_Supplys to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initORF_Supplys()
    {
        if (collORF_Supplys == null)
        {
            collORF_Supplys = new ArrayList();
        }
    }

    /**
     * Method called to associate a ORF_Supply object to this object
     * through the ORF_Supply foreign key attribute
     *
     * @param l ORF_Supply
     * @throws TorqueException
     */
    public void addORF_Supply(ORF_Supply l) throws TorqueException
    {
        getORF_Supplys().add(l);
        l.setORF((ORF) this);
    }

    /**
     * The criteria used to select the current contents of collORF_Supplys
     */
    private Criteria lastORF_SupplysCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getORF_Supplys(new Criteria())
     *
     * @throws TorqueException
     */
    public List getORF_Supplys() throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            collORF_Supplys = getORF_Supplys(new Criteria(10));
        }
        return collORF_Supplys;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ORF has previously
     * been saved, it will retrieve related ORF_Supplys from storage.
     * If this ORF is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getORF_Supplys(Criteria criteria) throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            if (isNew())
            {
               collORF_Supplys = new ArrayList();
            }
            else
            {
                      criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID() );
                      collORF_Supplys = ORF_SupplyPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                      if (!lastORF_SupplysCriteria.equals(criteria))
                {
                    collORF_Supplys = ORF_SupplyPeer.doSelect(criteria);
                }
            }
        }
        lastORF_SupplysCriteria = criteria;

        return collORF_Supplys;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getORF_Supplys(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getORF_Supplys(Connection con) throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            collORF_Supplys = getORF_Supplys(new Criteria(10), con);
        }
        return collORF_Supplys;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ORF has previously
     * been saved, it will retrieve related ORF_Supplys from storage.
     * If this ORF is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getORF_Supplys(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            if (isNew())
            {
               collORF_Supplys = new ArrayList();
            }
            else
            {
                       criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                       collORF_Supplys = ORF_SupplyPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                       if (!lastORF_SupplysCriteria.equals(criteria))
                 {
                     collORF_Supplys = ORF_SupplyPeer.doSelect(criteria, con);
                 }
             }
         }
         lastORF_SupplysCriteria = criteria;

         return collORF_Supplys;
     }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ORF is new, it will return
     * an empty collection; or if this ORF has previously
     * been saved, it will retrieve related ORF_Supplys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ORF.
     */
    protected List getORF_SupplysJoinUser(Criteria criteria)
        throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            if (isNew())
            {
               collORF_Supplys = new ArrayList();
            }
            else
            {
                            criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                            collORF_Supplys = ORF_SupplyPeer.doSelectJoinUser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                        if (!lastORF_SupplysCriteria.equals(criteria))
            {
                collORF_Supplys = ORF_SupplyPeer.doSelectJoinUser(criteria);
            }
        }
        lastORF_SupplysCriteria = criteria;

        return collORF_Supplys;
    }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this ORF is new, it will return
     * an empty collection; or if this ORF has previously
     * been saved, it will retrieve related ORF_Supplys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ORF.
     */
    protected List getORF_SupplysJoinORF(Criteria criteria)
        throws TorqueException
    {
        if (collORF_Supplys == null)
        {
            if (isNew())
            {
               collORF_Supplys = new ArrayList();
            }
            else
            {
                            criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                            collORF_Supplys = ORF_SupplyPeer.doSelectJoinORF(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(ORF_SupplyPeer.ORF_ID, getORF_ID());
                        if (!lastORF_SupplysCriteria.equals(criteria))
            {
                collORF_Supplys = ORF_SupplyPeer.doSelectJoinORF(criteria);
            }
        }
        lastORF_SupplysCriteria = criteria;

        return collORF_Supplys;
    }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ORF_ID");
              fieldNames.add("Status");
              fieldNames.add("User_ID");
              fieldNames.add("Issue_Date");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ORF_ID"))
        {
                return new Integer(getORF_ID());
            }
          if (name.equals("Status"))
        {
                return new Boolean(getStatus());
            }
          if (name.equals("User_ID"))
        {
                return new Integer(getUser_ID());
            }
          if (name.equals("Issue_Date"))
        {
                return getIssue_Date();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ORFPeer.ORF_ID))
        {
                return new Integer(getORF_ID());
            }
          if (name.equals(ORFPeer.STATUS))
        {
                return new Boolean(getStatus());
            }
          if (name.equals(ORFPeer.USER_ID))
        {
                return new Integer(getUser_ID());
            }
          if (name.equals(ORFPeer.ISSUE_DATE))
        {
                return getIssue_Date();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getORF_ID());
            }
              if (pos == 1)
        {
                return new Boolean(getStatus());
            }
              if (pos == 2)
        {
                return new Integer(getUser_ID());
            }
              if (pos == 3)
        {
                return getIssue_Date();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ORFPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ORFPeer.doInsert((ORF) this, con);
                    setNew(false);
                }
                else
                {
                    ORFPeer.doUpdate((ORF) this, con);
                }
            }

                                      
                
            if (collORF_Supplys != null)
            {
                for (int i = 0; i < collORF_Supplys.size(); i++)
                {
                    ((ORF_Supply) collORF_Supplys.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                                                
  
    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);
    
    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        SimpleKey tmpKey = null;
                      setORF_ID(((NumberKey)keys[0]).intValue());
                        setUser_ID(((NumberKey)keys[1]).intValue());
              }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
         * @param int oRF_ID
         * @param int user_ID
         */
    public void setPrimaryKey( int oRF_ID, int user_ID)
        throws TorqueException
    {
            setORF_ID(oRF_ID);
            setUser_ID(user_ID);
        }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
              pks[0] = SimpleKey.keyFor(getORF_ID());
                  pks[1] = SimpleKey.keyFor(getUser_ID());
                  return comboPK;
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public ORF copy() throws TorqueException
    {
        return copyInto(new ORF());
    }
  
    protected ORF copyInto(ORF copyObj) throws TorqueException
    {
          copyObj.setORF_ID(oRF_ID);
          copyObj.setStatus(status);
          copyObj.setUser_ID(user_ID);
          copyObj.setIssue_Date(issue_Date);
  
                    copyObj.setORF_ID(0);
                                    copyObj.setUser_ID(0);
                  
                                      
                
        List v = getORF_Supplys();
        for (int i = 0; i < v.size(); i++)
        {
            ORF_Supply obj = (ORF_Supply) v.get(i);
            copyObj.addORF_Supply(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ORFPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("ORF:\n");
        str.append("ORF_ID = ")
           .append(getORF_ID())
           .append("\n");
        str.append("Status = ")
           .append(getStatus())
           .append("\n");
        str.append("User_ID = ")
           .append(getUser_ID())
           .append("\n");
        str.append("Issue_Date = ")
           .append(getIssue_Date())
           .append("\n");
        return(str.toString());
    }
}
