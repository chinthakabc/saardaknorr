package inventorysystem.dao;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed Mar 03 16:45:55 CST 2010]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ORF_Supply
 */
public abstract class BaseORF_Supply extends BaseObject
{
    /** The Peer class */
    private static final ORF_SupplyPeer peer =
        new ORF_SupplyPeer();

        
    /** The value for the oRF_ID field */
    private int oRF_ID;
      
    /** The value for the user_ID field */
    private int user_ID;
      
    /** The value for the supply_Type field */
    private String supply_Type;
      
    /** The value for the supply_name field */
    private String supply_name;
      
    /** The value for the quantity field */
    private String quantity;
      
    /** The value for the price field */
    private String price;
  
    
    /**
     * Get the ORF_ID
     *
     * @return int
     */
    public int getORF_ID()
    {
        return oRF_ID;
    }

                              
    /**
     * Set the value of ORF_ID
     *
     * @param v new value
     */
    public void setORF_ID(int v) throws TorqueException
    {
    
                  if (this.oRF_ID != v)
              {
            this.oRF_ID = v;
            setModified(true);
        }
    
                          
                if (aORF != null && !(aORF.getORF_ID() == v))
                {
            aORF = null;
        }
      
              }
  
    /**
     * Get the User_ID
     *
     * @return int
     */
    public int getUser_ID()
    {
        return user_ID;
    }

                              
    /**
     * Set the value of User_ID
     *
     * @param v new value
     */
    public void setUser_ID(int v) throws TorqueException
    {
    
                  if (this.user_ID != v)
              {
            this.user_ID = v;
            setModified(true);
        }
    
                          
                if (aUser != null && !(aUser.getUser_ID() == v))
                {
            aUser = null;
        }
      
              }
  
    /**
     * Get the Supply_Type
     *
     * @return String
     */
    public String getSupply_Type()
    {
        return supply_Type;
    }

                        
    /**
     * Set the value of Supply_Type
     *
     * @param v new value
     */
    public void setSupply_Type(String v) 
    {
    
                  if (!ObjectUtils.equals(this.supply_Type, v))
              {
            this.supply_Type = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Supply_name
     *
     * @return String
     */
    public String getSupply_name()
    {
        return supply_name;
    }

                        
    /**
     * Set the value of Supply_name
     *
     * @param v new value
     */
    public void setSupply_name(String v) 
    {
    
                  if (!ObjectUtils.equals(this.supply_name, v))
              {
            this.supply_name = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Quantity
     *
     * @return String
     */
    public String getQuantity()
    {
        return quantity;
    }

                        
    /**
     * Set the value of Quantity
     *
     * @param v new value
     */
    public void setQuantity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.quantity, v))
              {
            this.quantity = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Price
     *
     * @return String
     */
    public String getPrice()
    {
        return price;
    }

                        
    /**
     * Set the value of Price
     *
     * @param v new value
     */
    public void setPrice(String v) 
    {
    
                  if (!ObjectUtils.equals(this.price, v))
              {
            this.price = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private User aUser;

    /**
     * Declares an association between this object and a User object
     *
     * @param v User
     * @throws TorqueException
     */
    public void setUser(User v) throws TorqueException
    {
            if (v == null)
        {
                    setUser_ID(0);
                  }
        else
        {
            setUser_ID(v.getUser_ID());
        }
                aUser = v;
    }

                                            
    /**
     * Get the associated User object
     *
     * @return the associated User object
     * @throws TorqueException
     */
    public User getUser() throws TorqueException
    {
        if (aUser == null && (this.user_ID > 0))
        {
                          aUser = UserPeer.retrieveByPK(SimpleKey.keyFor(this.user_ID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               User obj = UserPeer.retrieveByPK(this.user_ID);
               obj.addORF_Supplys(this);
            */
        }
        return aUser;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setUserKey(ObjectKey key) throws TorqueException
    {
      
                        setUser_ID(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private ORF aORF;

    /**
     * Declares an association between this object and a ORF object
     *
     * @param v ORF
     * @throws TorqueException
     */
    public void setORF(ORF v) throws TorqueException
    {
            if (v == null)
        {
                    setORF_ID(0);
                  }
        else
        {
            setORF_ID(v.getORF_ID());
        }
                aORF = v;
    }

                                            
    /**
     * Get the associated ORF object
     *
     * @return the associated ORF object
     * @throws TorqueException
     */
    public ORF getORF() throws TorqueException
    {
        if (aORF == null && (this.oRF_ID > 0))
        {
                          aORF = ORFPeer.retrieveByPK(SimpleKey.keyFor(this.oRF_ID));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ORF obj = ORFPeer.retrieveByPK(this.oRF_ID);
               obj.addORF_Supplys(this);
            */
        }
        return aORF;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setORFKey(ObjectKey key) throws TorqueException
    {
      
                        setORF_ID(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ORF_ID");
              fieldNames.add("User_ID");
              fieldNames.add("Supply_Type");
              fieldNames.add("Supply_name");
              fieldNames.add("Quantity");
              fieldNames.add("Price");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ORF_ID"))
        {
                return new Integer(getORF_ID());
            }
          if (name.equals("User_ID"))
        {
                return new Integer(getUser_ID());
            }
          if (name.equals("Supply_Type"))
        {
                return getSupply_Type();
            }
          if (name.equals("Supply_name"))
        {
                return getSupply_name();
            }
          if (name.equals("Quantity"))
        {
                return getQuantity();
            }
          if (name.equals("Price"))
        {
                return getPrice();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ORF_SupplyPeer.ORF_ID))
        {
                return new Integer(getORF_ID());
            }
          if (name.equals(ORF_SupplyPeer.USER_ID))
        {
                return new Integer(getUser_ID());
            }
          if (name.equals(ORF_SupplyPeer.SUPPLY_TYPE))
        {
                return getSupply_Type();
            }
          if (name.equals(ORF_SupplyPeer.SUPPLY_NAME))
        {
                return getSupply_name();
            }
          if (name.equals(ORF_SupplyPeer.QUANTITY))
        {
                return getQuantity();
            }
          if (name.equals(ORF_SupplyPeer.PRICE))
        {
                return getPrice();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getORF_ID());
            }
              if (pos == 1)
        {
                return new Integer(getUser_ID());
            }
              if (pos == 2)
        {
                return getSupply_Type();
            }
              if (pos == 3)
        {
                return getSupply_name();
            }
              if (pos == 4)
        {
                return getQuantity();
            }
              if (pos == 5)
        {
                return getPrice();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ORF_SupplyPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ORF_SupplyPeer.doInsert((ORF_Supply) this, con);
                    setNew(false);
                }
                else
                {
                    ORF_SupplyPeer.doUpdate((ORF_Supply) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


                                                
  
    private final SimpleKey[] pks = new SimpleKey[2];
    private final ComboKey comboPK = new ComboKey(pks);
    
    /**
     * Set the PrimaryKey with an ObjectKey
     *
     * @param key
     */
    public void setPrimaryKey(ObjectKey key) throws TorqueException
    {
        SimpleKey[] keys = (SimpleKey[]) key.getValue();
        SimpleKey tmpKey = null;
                      setORF_ID(((NumberKey)keys[0]).intValue());
                        setUser_ID(((NumberKey)keys[1]).intValue());
              }

    /**
     * Set the PrimaryKey using SimpleKeys.
     *
         * @param int oRF_ID
         * @param int user_ID
         */
    public void setPrimaryKey( int oRF_ID, int user_ID)
        throws TorqueException
    {
            setORF_ID(oRF_ID);
            setUser_ID(user_ID);
        }

    /**
     * Set the PrimaryKey using a String.
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
        setPrimaryKey(new ComboKey(key));
    }
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
              pks[0] = SimpleKey.keyFor(getORF_ID());
                  pks[1] = SimpleKey.keyFor(getUser_ID());
                  return comboPK;
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public ORF_Supply copy() throws TorqueException
    {
        return copyInto(new ORF_Supply());
    }
  
    protected ORF_Supply copyInto(ORF_Supply copyObj) throws TorqueException
    {
          copyObj.setORF_ID(oRF_ID);
          copyObj.setUser_ID(user_ID);
          copyObj.setSupply_Type(supply_Type);
          copyObj.setSupply_name(supply_name);
          copyObj.setQuantity(quantity);
          copyObj.setPrice(price);
  
                    copyObj.setORF_ID(0);
                              copyObj.setUser_ID(0);
                                    
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ORF_SupplyPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("ORF_Supply:\n");
        str.append("ORF_ID = ")
           .append(getORF_ID())
           .append("\n");
        str.append("User_ID = ")
           .append(getUser_ID())
           .append("\n");
        str.append("Supply_Type = ")
           .append(getSupply_Type())
           .append("\n");
        str.append("Supply_name = ")
           .append(getSupply_name())
           .append("\n");
        str.append("Quantity = ")
           .append(getQuantity())
           .append("\n");
        str.append("Price = ")
           .append(getPrice())
           .append("\n");
        return(str.toString());
    }
}
